(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{392:function(a,t,r){"use strict";r.r(t);var e=r(19),i=Object(e.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"progit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#progit","aria-hidden":"true"}},[a._v("#")]),a._v(" ProGit")]),a._v(" "),r("h2",{attrs:{id:"起步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#起步","aria-hidden":"true"}},[a._v("#")]),a._v(" 起步")]),a._v(" "),r("h3",{attrs:{id:"初次运行git前的配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#初次运行git前的配置","aria-hidden":"true"}},[a._v("#")]),a._v(" 初次运行Git前的配置")]),a._v(" "),r("h4",{attrs:{id:"用户信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用户信息","aria-hidden":"true"}},[a._v("#")]),a._v(" 用户信息")]),a._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global user.name xxx\n"),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global user.email xxx\n")])])]),r("p",[a._v("如果使用了"),r("code",[a._v("--global")]),a._v("，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情，Git都会使用那些信息。当你想针对特定项目使用不同的用户名称和邮件地址时，可以在那个项目目录下运行没有"),r("code",[a._v("--global")]),a._v("选项的命令来配置")]),a._v(" "),r("h4",{attrs:{id:"检查配置信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#检查配置信息","aria-hidden":"true"}},[a._v("#")]),a._v(" 检查配置信息")]),a._v(" "),r("p",[a._v("git config --list")]),a._v(" "),r("p",[a._v("列出所有Git当时能找到的配置")]),a._v(" "),r("p",[a._v("你可能会看到重复的变量名，因为Git会从不同的文件同读取同一个配置。这种情况下，Git会使用它找到的每一个变量的最后一个配置")]),a._v(" "),r("p",[a._v("git config "),r("code",[a._v("<key>")]),a._v(" 来检查Git的某一项配置")]),a._v(" "),r("h3",{attrs:{id:"记录每次更新到仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#记录每次更新到仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 记录每次更新到仓库")]),a._v(" "),r("h4",{attrs:{id:"状态简览"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#状态简览","aria-hidden":"true"}},[a._v("#")]),a._v(" 状态简览")]),a._v(" "),r("p",[a._v("git status -s/--short")]),a._v(" "),r("h4",{attrs:{id:"跳过使用暂存区域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跳过使用暂存区域","aria-hidden":"true"}},[a._v("#")]),a._v(" 跳过使用暂存区域")]),a._v(" "),r("p",[a._v("git commit -a")]),a._v(" "),r("h4",{attrs:{id:"移除文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#移除文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 移除文件")]),a._v(" "),r("p",[a._v("git rm")]),a._v(" "),r("p",[a._v("git rm 命令后面可以列出文件或者目录的名字，也可以使用glob模式")]),a._v(" "),r("h4",{attrs:{id:"移动文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#移动文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 移动文件")]),a._v(" "),r("p",[a._v("git mv")]),a._v(" "),r("p",[a._v("可用来重命名")]),a._v(" "),r("h3",{attrs:{id:"查看提交历史"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看提交历史","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看提交历史")]),a._v(" "),r("p",[a._v("git log")]),a._v(" "),r("p",[a._v("git log -p 用来显示每次提交的内容差异")]),a._v(" "),r("p",[a._v("git log -stat 每次提交的简略统计信息")]),a._v(" "),r("h4",{attrs:{id:"限制输出长度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#限制输出长度","aria-hidden":"true"}},[a._v("#")]),a._v(" 限制输出长度")]),a._v(" "),r("p",[a._v("git log -"),r("code",[a._v("<n>")]),a._v(" 表示仅显示最近的若干条提交")]),a._v(" "),r("p",[a._v("--since/after")]),a._v(" "),r("p",[a._v("--until/before")]),a._v(" "),r("p",[a._v("--author 显示指定作者的提交")]),a._v(" "),r("p",[a._v("--grep 搜索提交说明中的关键字")]),a._v(" "),r("h3",{attrs:{id:"撤销操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#撤销操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 撤销操作")]),a._v(" "),r("p",[a._v("git commit --amend")]),a._v(" "),r("p",[a._v("这个命令会将暂存区中的文件提交。如果自上次提交以来你还未做任何修改，那么快照会保持不变。而你所修改的只是提交信息")]),a._v(" "),r("h4",{attrs:{id:"取消暂存文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#取消暂存文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 取消暂存文件")]),a._v(" "),r("p",[a._v("git reset HEAD "),r("code",[a._v("<file>")])]),a._v(" "),r("h4",{attrs:{id:"撤销对文件的修改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#撤销对文件的修改","aria-hidden":"true"}},[a._v("#")]),a._v(" 撤销对文件的修改")]),a._v(" "),r("p",[a._v("git checkout -- "),r("code",[a._v("<file>")])]),a._v(" "),r("h3",{attrs:{id:"远程仓库的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库的使用","aria-hidden":"true"}},[a._v("#")]),a._v(" 远程仓库的使用")]),a._v(" "),r("h4",{attrs:{id:"查看远程仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看远程仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看远程仓库")]),a._v(" "),r("p",[a._v("git remote -v 显示远程仓库使用的Git保存的简写与其对应的URL")]),a._v(" "),r("p",[a._v("git remote show [remote-name]")]),a._v(" "),r("h4",{attrs:{id:"添加远程仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#添加远程仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 添加远程仓库")]),a._v(" "),r("p",[a._v("git remote add "),r("code",[a._v("<shortname>")]),a._v(" url 添加一个新的远程Git仓库，同时指定一个你可以轻松引用的简写")]),a._v(" "),r("h4",{attrs:{id:"从远程仓库中抓取与拉取"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#从远程仓库中抓取与拉取","aria-hidden":"true"}},[a._v("#")]),a._v(" 从远程仓库中抓取与拉取")]),a._v(" "),r("p",[a._v("git fetch [remote-name]")]),a._v(" "),r("p",[a._v("git pull")]),a._v(" "),r("h4",{attrs:{id:"推送到远程仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推送到远程仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 推送到远程仓库")]),a._v(" "),r("p",[a._v("git push origin master")]),a._v(" "),r("h4",{attrs:{id:"远程仓库的移除与重命名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库的移除与重命名","aria-hidden":"true"}},[a._v("#")]),a._v(" 远程仓库的移除与重命名")]),a._v(" "),r("p",[a._v("git remote rename [old_name] [new_name]")]),a._v(" "),r("p",[a._v("git remote rm [remote-name]")]),a._v(" "),r("h3",{attrs:{id:"打标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 打标签")]),a._v(" "),r("p",[a._v("git tag")]),a._v(" "),r("h4",{attrs:{id:"创建标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建标签")]),a._v(" "),r("p",[a._v("Git使用两种主要类型的标签: 轻量标签与附注标签")]),a._v(" "),r("h4",{attrs:{id:"附注标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#附注标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 附注标签")]),a._v(" "),r("p",[a._v("git tag -a [tag] -m [message]")]),a._v(" "),r("h4",{attrs:{id:"轻量标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#轻量标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 轻量标签")]),a._v(" "),r("p",[a._v("git tag [message]")]),a._v(" "),r("h4",{attrs:{id:"后期打标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#后期打标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 后期打标签")]),a._v(" "),r("p",[a._v("git tag -a [tag] [hash]")]),a._v(" "),r("h4",{attrs:{id:"共享标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#共享标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 共享标签")]),a._v(" "),r("p",[a._v("git push origin [tag]")]),a._v(" "),r("p",[a._v("一次性推送多个标签")]),a._v(" "),r("p",[a._v("git push --tags")]),a._v(" "),r("h4",{attrs:{id:"检出标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#检出标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 检出标签")]),a._v(" "),r("p",[a._v("git checkout -b [branchname] [tag]")]),a._v(" "),r("h3",{attrs:{id:"git别名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git别名","aria-hidden":"true"}},[a._v("#")]),a._v(" Git别名")]),a._v(" "),r("p",[a._v("Git 并不会在你输入部分命令时自动推断出你想要的命令。如果不想每次都输入完整的 Git 命令，可以通过 git\nconfig 文件来轻松地为每一个命令设置一个别名")]),a._v(" "),r("p",[a._v("例如:")]),a._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global alias.co checkout\n"),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global alias.br branch\n"),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global alias.ci commit\n"),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global alias.st status\n")])])]),r("h2",{attrs:{id:"git分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git分支","aria-hidden":"true"}},[a._v("#")]),a._v(" Git分支")]),a._v(" "),r("h3",{attrs:{id:"分支简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支简介","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支简介")]),a._v(" "),r("h4",{attrs:{id:"分支创建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支创建","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支创建")]),a._v(" "),r("p",[a._v("git branch [branch-name]")]),a._v(" "),r("h4",{attrs:{id:"分支切换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支切换","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支切换")]),a._v(" "),r("p",[a._v("git checkout [branch-name]")]),a._v(" "),r("h3",{attrs:{id:"分支的新建与合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支的新建与合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支的新建与合并")]),a._v(" "),r("h4",{attrs:{id:"新建分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新建分支","aria-hidden":"true"}},[a._v("#")]),a._v(" 新建分支")]),a._v(" "),r("p",[a._v("git checkout -b [new_branch]")]),a._v(" "),r("p",[a._v("新建一个分支并同时切换到那个分支上")]),a._v(" "),r("p",[a._v("等于")]),a._v(" "),r("p",[a._v("git branch [new_branch]\ngit checkout [new_branch]")]),a._v(" "),r("p",[a._v("git merge --no-ff")]),a._v(" "),r("p",[a._v("git branch -d")]),a._v(" "),r("h4",{attrs:{id:"分支的合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支的合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支的合并")]),a._v(" "),r("p",[a._v("需要指出的是，Git会自行决定选区哪一个提交作为最优的共同祖先，并以此作为合并的基础")]),a._v(" "),r("h4",{attrs:{id:"遇到冲突时的分支合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#遇到冲突时的分支合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 遇到冲突时的分支合并")]),a._v(" "),r("h3",{attrs:{id:"分支管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支管理","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支管理")]),a._v(" "),r("p",[a._v("git branch -v --merged | --no-merged")]),a._v(" "),r("h3",{attrs:{id:"分支开发工作流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支开发工作流","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支开发工作流")]),a._v(" "),r("h4",{attrs:{id:"长期分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#长期分支","aria-hidden":"true"}},[a._v("#")]),a._v(" 长期分支")]),a._v(" "),r("h4",{attrs:{id:"特性分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特性分支","aria-hidden":"true"}},[a._v("#")]),a._v(" 特性分支")]),a._v(" "),r("h3",{attrs:{id:"远程分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#远程分支","aria-hidden":"true"}},[a._v("#")]),a._v(" 远程分支")]),a._v(" "),r("h4",{attrs:{id:"推送"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推送","aria-hidden":"true"}},[a._v("#")]),a._v(" 推送")]),a._v(" "),r("p",[a._v("git push")]),a._v(" "),r("h4",{attrs:{id:"跟踪分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跟踪分支","aria-hidden":"true"}},[a._v("#")]),a._v(" 跟踪分支")]),a._v(" "),r("p",[a._v("git checkout --track origin/xxx")]),a._v(" "),r("p",[a._v("git checkou -b xx origin/xxx")]),a._v(" "),r("p",[a._v("git branch -u origin/xxx")]),a._v(" "),r("h4",{attrs:{id:"拉取"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#拉取","aria-hidden":"true"}},[a._v("#")]),a._v(" 拉取")]),a._v(" "),r("p",[a._v("git fetch  get merge")]),a._v(" "),r("p",[a._v("git pull")]),a._v(" "),r("h4",{attrs:{id:"删除远程分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除远程分支","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除远程分支")]),a._v(" "),r("p",[a._v("git push origin --delete [branch_name]")]),a._v(" "),r("h3",{attrs:{id:"变基"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变基","aria-hidden":"true"}},[a._v("#")]),a._v(" 变基")]),a._v(" "),r("h4",{attrs:{id:"变基的基本操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变基的基本操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 变基的基本操作")]),a._v(" "),r("p",[a._v("git checkout [current_branch]")]),a._v(" "),r("p",[a._v("git rebase [target_branch]")]),a._v(" "),r("h4",{attrs:{id:"更有趣的变基例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更有趣的变基例子","aria-hidden":"true"}},[a._v("#")]),a._v(" 更有趣的变基例子")]),a._v(" "),r("p",[a._v("git rebase --onto [target_branch] [mid_branch] [current_branch]")]),a._v(" "),r("h4",{attrs:{id:"变基的风险"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变基的风险","aria-hidden":"true"}},[a._v("#")]),a._v(" 变基的风险")]),a._v(" "),r("p",[a._v("不要对在你的仓库外有副本的分支执行变基")]),a._v(" "),r("h3",{attrs:{id:"用变基解决变基"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用变基解决变基","aria-hidden":"true"}},[a._v("#")]),a._v(" 用变基解决变基")]),a._v(" "),r("h2",{attrs:{id:"服务器上的git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务器上的git","aria-hidden":"true"}},[a._v("#")]),a._v(" 服务器上的Git")]),a._v(" "),r("h3",{attrs:{id:"协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#协议","aria-hidden":"true"}},[a._v("#")]),a._v(" 协议")]),a._v(" "),r("h4",{attrs:{id:"本地协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本地协议","aria-hidden":"true"}},[a._v("#")]),a._v(" 本地协议")]),a._v(" "),r("p",[a._v("git clone /xxx/xxx.git")]),a._v(" "),r("p",[a._v("git clone file:///xxx/xxx.git")]),a._v(" "),r("p",[a._v("git remote add")]),a._v(" "),r("h4",{attrs:{id:"http协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http协议","aria-hidden":"true"}},[a._v("#")]),a._v(" HTTP协议")]),a._v(" "),r("h4",{attrs:{id:"ssh协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ssh协议","aria-hidden":"true"}},[a._v("#")]),a._v(" SSH协议")]),a._v(" "),r("h4",{attrs:{id:"git协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git协议","aria-hidden":"true"}},[a._v("#")]),a._v(" Git协议")]),a._v(" "),r("h3",{attrs:{id:"在服务器上搭建git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在服务器上搭建git","aria-hidden":"true"}},[a._v("#")]),a._v(" 在服务器上搭建Git")]),a._v(" "),r("h3",{attrs:{id:"生成ssh公钥"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成ssh公钥","aria-hidden":"true"}},[a._v("#")]),a._v(" 生成SSH公钥")]),a._v(" "),r("p",[a._v("默认情况下，用户的ssh密钥存储在其~/.ssh目录下")]),a._v(" "),r("p",[a._v("ssh-keygen")]),a._v(" "),r("h2",{attrs:{id:"分布式git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分布式git","aria-hidden":"true"}},[a._v("#")]),a._v(" 分布式Git")]),a._v(" "),r("h3",{attrs:{id:"维护项目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#维护项目","aria-hidden":"true"}},[a._v("#")]),a._v(" 维护项目")]),a._v(" "),r("h4",{attrs:{id:"生成一个构建号"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成一个构建号","aria-hidden":"true"}},[a._v("#")]),a._v(" 生成一个构建号")]),a._v(" "),r("p",[a._v("如果你想为提交附上一个可读的名称，可以对其运行git describe命令")]),a._v(" "),r("p",[a._v("Git将会给胡一个字符串，它由最近的标签名、自该标签之后的提交数目和你所描述的提交的部分SHA-1值构成")]),a._v(" "),r("h2",{attrs:{id:"git工具"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git工具","aria-hidden":"true"}},[a._v("#")]),a._v(" Git工具")]),a._v(" "),r("h3",{attrs:{id:"选择修订版本"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选择修订版本","aria-hidden":"true"}},[a._v("#")]),a._v(" 选择修订版本")]),a._v(" "),r("h4",{attrs:{id:"简短的sha-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简短的sha-1","aria-hidden":"true"}},[a._v("#")]),a._v(" 简短的SHA-1")]),a._v(" "),r("p",[a._v("Git 十分智能，你只需要提供 SHA-1 的前几个字符就可以获得对应的那次提交，当然你提供的 SHA-1 字符数量不得少于 4 个，并且没有歧义——也就是说，当前仓库中只有一个对象以这段 SHA-1 开头")]),a._v(" "),r("h4",{attrs:{id:"引用日志"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#引用日志","aria-hidden":"true"}},[a._v("#")]),a._v(" 引用日志")]),a._v(" "),r("p",[a._v("git reflog 查看引用日志")]),a._v(" "),r("p",[a._v("git log -g 查看类似git log输出格式的引用日志信息")]),a._v(" "),r("p",[a._v("值得注意的是，引用日志只存在于本地仓库，一个记录你在你自己的仓库里做过什么的日志。\n其他人拷贝的仓库里的引用日志不会和你的相同；而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。")]),a._v(" "),r("h4",{attrs:{id:"祖先引用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#祖先引用","aria-hidden":"true"}},[a._v("#")]),a._v(" 祖先引用")]),a._v(" "),r("p",[a._v("HEAD^")]),a._v(" "),r("p",[a._v("HEAD~")]),a._v(" "),r("h4",{attrs:{id:"提交区间"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提交区间","aria-hidden":"true"}},[a._v("#")]),a._v(" 提交区间")]),a._v(" "),r("h5",{attrs:{id:"双点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双点","aria-hidden":"true"}},[a._v("#")]),a._v(" 双点")]),a._v(" "),r("p",[a._v("git log branch_A..branch_B 显示在A分之中而不在B中的提交")]),a._v(" "),r("h5",{attrs:{id:"多点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多点","aria-hidden":"true"}},[a._v("#")]),a._v(" 多点")]),a._v(" "),r("p",[a._v("Git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希望提交被包含其中的分支")]),a._v(" "),r("p",[a._v("git log refA refB ^refC\ngit log refA refB --not refC")]),a._v(" "),r("h3",{attrs:{id:"交互式暂存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#交互式暂存","aria-hidden":"true"}},[a._v("#")]),a._v(" 交互式暂存")]),a._v(" "),r("p",[a._v("git add -i")]),a._v(" "),r("h3",{attrs:{id:"储藏与清理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#储藏与清理","aria-hidden":"true"}},[a._v("#")]),a._v(" 储藏与清理")]),a._v(" "),r("p",[a._v("git stash")]),a._v(" "),r("p",[a._v("git stash apply 如果不指定储藏，Git认为指定的是最近的储藏")]),a._v(" "),r("p",[a._v("git stash drop 移除贮藏")]),a._v(" "),r("p",[a._v("git stash pop 应用贮藏并删除记录")]),a._v(" "),r("h3",{attrs:{id:"搜索"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#搜索","aria-hidden":"true"}},[a._v("#")]),a._v(" 搜索")]),a._v(" "),r("p",[a._v("git grep")]),a._v(" "),r("p",[a._v("从提交历史或者工作目录中查找一个字符串或者正则表达式")]),a._v(" "),r("h3",{attrs:{id:"重写历史"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重写历史","aria-hidden":"true"}},[a._v("#")]),a._v(" 重写历史")]),a._v(" "),r("h4",{attrs:{id:"修改最后一次提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#修改最后一次提交","aria-hidden":"true"}},[a._v("#")]),a._v(" 修改最后一次提交")]),a._v(" "),r("p",[a._v("git commit --amend 修改最后一次提交的提交信息")]),a._v(" "),r("h4",{attrs:{id:"修改多个提交信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#修改多个提交信息","aria-hidden":"true"}},[a._v("#")]),a._v(" 修改多个提交信息")]),a._v(" "),r("p",[a._v("git rebase -i HEAD~n")]),a._v(" "),r("p",[a._v("交互式变基")]),a._v(" "),r("h5",{attrs:{id:"重新排序提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重新排序提交","aria-hidden":"true"}},[a._v("#")]),a._v(" 重新排序提交")]),a._v(" "),r("h5",{attrs:{id:"压缩提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#压缩提交","aria-hidden":"true"}},[a._v("#")]),a._v(" 压缩提交")]),a._v(" "),r("p",[a._v("使用squash选项")]),a._v(" "),r("h5",{attrs:{id:"拆分提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#拆分提交","aria-hidden":"true"}},[a._v("#")]),a._v(" 拆分提交")]),a._v(" "),r("p",[a._v("使用edit选项")]),a._v(" "),r("h5",{attrs:{id:"核武器级选项-filter-branch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核武器级选项-filter-branch","aria-hidden":"true"}},[a._v("#")]),a._v(" 核武器级选项: filter-branch")]),a._v(" "),r("h3",{attrs:{id:"重置揭秘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重置揭秘","aria-hidden":"true"}},[a._v("#")]),a._v(" 重置揭秘")]),a._v(" "),r("h4",{attrs:{id:"三棵树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三棵树","aria-hidden":"true"}},[a._v("#")]),a._v(" 三棵树")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("树")]),a._v(" "),r("th",[a._v("用途")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("HEAD")]),a._v(" "),r("td",[a._v("上一次提交的快照，下一次提交的父结点")])]),a._v(" "),r("tr",[r("td",[a._v("Index")]),a._v(" "),r("td",[a._v("预期的下一次提交的快照")])]),a._v(" "),r("tr",[r("td",[a._v("Working Directory")]),a._v(" "),r("td",[a._v("沙盒")])])])]),a._v(" "),r("h4",{attrs:{id:"head"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#head","aria-hidden":"true"}},[a._v("#")]),a._v(" HEAD")]),a._v(" "),r("p",[a._v("HEAD是当前分支引用的指针，它总是指向该分支上的最后一次提交，这表示HEAD将是下一次提交的父结点")]),a._v(" "),r("p",[a._v("通常，理解HEAD的最简方式，就是将它看作你的上一次提交的快照")]),a._v(" "),r("h5",{attrs:{id:"索引"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#索引","aria-hidden":"true"}},[a._v("#")]),a._v(" 索引")]),a._v(" "),r("p",[a._v("索引是你的预期的下一次提交。我们也会将这个概念引用为Git的“暂存区域”，这就是当你运行git commit时Git看起来的样子")]),a._v(" "),r("p",[a._v("Git将上一次检出到工作目录中的所有文件填充到索引去，它们看起来就像最初被检出时的样子")]),a._v(" "),r("h5",{attrs:{id:"工作目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工作目录","aria-hidden":"true"}},[a._v("#")]),a._v(" 工作目录")]),a._v(" "),r("p",[a._v("另外两颗树以一种高效但并不直观的方式，将它们的内容存储在.git文件夹中。工作目录会将他们解包为实际的文件以便编辑")]),a._v(" "),r("h5",{attrs:{id:"重置的作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重置的作用","aria-hidden":"true"}},[a._v("#")]),a._v(" 重置的作用")]),a._v(" "),r("h3",{attrs:{id:"高级合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#高级合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 高级合并")]),a._v(" "),r("h4",{attrs:{id:"合并冲突"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合并冲突","aria-hidden":"true"}},[a._v("#")]),a._v(" 合并冲突")]),a._v(" "),r("h5",{attrs:{id:"中断一次合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中断一次合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 中断一次合并")]),a._v(" "),r("p",[a._v("git merge --abort")]),a._v(" "),r("h4",{attrs:{id:"撤销合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#撤销合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 撤销合并")]),a._v(" "),r("h5",{attrs:{id:"修复引用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#修复引用","aria-hidden":"true"}},[a._v("#")]),a._v(" 修复引用")]),a._v(" "),r("p",[a._v("git reset --hard HEAD~")]),a._v(" "),r("p",[a._v("这种方法的缺点是它会重写历史，在一个共享的仓库中这会造成问题")]),a._v(" "),r("h5",{attrs:{id:"还原提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#还原提交","aria-hidden":"true"}},[a._v("#")]),a._v(" 还原提交")]),a._v(" "),r("p",[a._v("git revert -m 1 HEAD")]),a._v(" "),r("p",[a._v('-m 1 标记指出"mainline"需要被保留下来的父节点')]),a._v(" "),r("h4",{attrs:{id:"其他类型的合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他类型的合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 其他类型的合并")]),a._v(" "),r("p",[a._v('到目前为止我们介绍的都是通过一个叫做"recursive"的合并策略来正常处理的两个分支的正常合并')]),a._v(" "),r("h5",{attrs:{id:"我们的或者他们的偏好"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#我们的或者他们的偏好","aria-hidden":"true"}},[a._v("#")]),a._v(" 我们的或者他们的偏好")]),a._v(" "),r("p",[a._v("默认情况下，当Git看到两个分支合并中的冲突时，它会将合并冲突标记添加到你的代码中并标记文件为冲突状态来让你解决。如果你希望Git简单地选择特定的一边并忽略另外一边而不是让你手动合并冲突，你可以传递给merge命令一个 -Xours或-Xtheirs参数")]),a._v(" "),r("p",[a._v("如果 Git 看到这个，它并不会增加冲突标记。任何可以合并的区别，它会直接合并。任何有冲突的区别，它会简单地选择你全局指定的一边，包括二进制文件")]),a._v(" "),r("h5",{attrs:{id:"子树合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#子树合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 子树合并")]),a._v(" "),r("h3",{attrs:{id:"rerere"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rerere","aria-hidden":"true"}},[a._v("#")]),a._v(" Rerere")]),a._v(" "),r("p",[a._v("git rerere功能是一个隐藏的功能。正如它的名字 “reuse recorded resolution” 所指，它允许你让Git记住解决一个块冲突的方法，这样在下一次看到相同冲突时，Git 可以为你自动地解决它")]),a._v(" "),r("p",[a._v("为了启用rerere功能，仅仅需要运行这个配置选项：")]),a._v(" "),r("p",[a._v("git config --global rerere.enabled true")]),a._v(" "),r("h3",{attrs:{id:"使用git调试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用git调试","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用Git调试")]),a._v(" "),r("h4",{attrs:{id:"文件标注"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文件标注","aria-hidden":"true"}},[a._v("#")]),a._v(" 文件标注")]),a._v(" "),r("p",[a._v("git blame 查看文件每一行的最后修改时间以及是被谁修改的")]),a._v(" "),r("p",[a._v("-L 选项来限制输出返回在 m,n行之间")]),a._v(" "),r("p",[a._v("-C 找出文件中从别的地方复制过来的代码片段的原始出处")]),a._v(" "),r("h4",{attrs:{id:"二分查找"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二分查找","aria-hidden":"true"}},[a._v("#")]),a._v(" 二分查找")]),a._v(" "),r("p",[a._v("git bisect 对提交历史进行二分查找来帮助你尽快找到时哪一个提交引入了问题")]),a._v(" "),r("p",[a._v("git bisect start [终点] [起点] 使用后会跳转到中间提交")]),a._v(" "),r("p",[a._v("git bisect bad/good 标记本次提交是否有问题")]),a._v(" "),r("p",[a._v("git bisect reset 退出差错，回到最近一次的代码提交")]),a._v(" "),r("h3",{attrs:{id:"子模块（没看懂）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#子模块（没看懂）","aria-hidden":"true"}},[a._v("#")]),a._v(" 子模块（没看懂）")]),a._v(" "),r("p",[a._v("子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。它能让你将另一\n个仓库克隆到自己的项目中，同时还保持提交的独立")]),a._v(" "),r("h3",{attrs:{id:"打包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打包","aria-hidden":"true"}},[a._v("#")]),a._v(" 打包")]),a._v(" "),r("p",[a._v("git bundle")]),a._v(" "),r("p",[a._v("git bundle create [文件名] [打包区间] 创建打包文件")]),a._v(" "),r("p",[a._v("git bundle verify 检查一个文件是否是一个合法的Git包，是否拥有共同的祖先来导入")]),a._v(" "),r("h3",{attrs:{id:"替换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#替换","aria-hidden":"true"}},[a._v("#")]),a._v(" 替换")]),a._v(" "),r("p",[a._v("git replace")]),a._v(" "),r("h3",{attrs:{id:"凭证存储"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#凭证存储","aria-hidden":"true"}},[a._v("#")]),a._v(" 凭证存储")]),a._v(" "),r("ul",[r("li",[a._v("默认所有都不缓存。每一次连接都会询问你的用户名和密码")]),a._v(" "),r("li",[a._v("cache 模式会将凭证存放在内存中一段时间。密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除")]),a._v(" "),r("li",[a._v("store 模式会将凭证用明文的形式存放在磁盘中，并且永不过期")]),a._v(" "),r("li",[a._v("Mac还有一种osxkeychain模式，会将凭证缓存到你系统用户的钥匙串中")])]),a._v(" "),r("h2",{attrs:{id:"自定义git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自定义git","aria-hidden":"true"}},[a._v("#")]),a._v(" 自定义Git")]),a._v(" "),r("h3",{attrs:{id:"配置git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置git","aria-hidden":"true"}},[a._v("#")]),a._v(" 配置Git")]),a._v(" "),r("p",[a._v("/etc/gitconfig")]),a._v(" "),r("p",[a._v("该文件含有系统里每位用户及他们所拥有的仓库的配置值")]),a._v(" "),r("p",[a._v("git config --system 读写该文件")]),a._v(" "),r("p",[a._v("~/.gitconfig")]),a._v(" "),r("p",[a._v("接下来Git会检查每个用户的Git配置文件")]),a._v(" "),r("p",[a._v("git config --global 读写该文件")]),a._v(" "),r("p",[a._v(".git/config")]),a._v(" "),r("p",[a._v("最后检查你正在操作的版本库所对应的Git目录下的配置文件")]),a._v(" "),r("p",[a._v("以上三个层次中每层的配置（系统、全局、本地）都会覆盖掉上一层额度配置")]),a._v(" "),r("h4",{attrs:{id:"客户端基本配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#客户端基本配置","aria-hidden":"true"}},[a._v("#")]),a._v(" 客户端基本配置")]),a._v(" "),r("p",[a._v("core.editor")]),a._v(" "),r("p",[a._v("git config --global core.editor emacs")]),a._v(" "),r("p",[a._v("使用core.editor选项来修改默认的编辑器")]),a._v(" "),r("p",[a._v("commit.template")]),a._v(" "),r("p",[a._v("如果把此项指定为你的系统上的某个文件的路径，当你提交得到时候，Git会使用该文件的内容作为提交的默认信息")]),a._v(" "),r("p",[a._v("git config --global commit.template ~/.gitmessage.txt")]),a._v(" "),r("p",[a._v("core.paper")]),a._v(" "),r("p",[a._v("该配置项指定诸如log和diff等命令所使用的分页器")]),a._v(" "),r("p",[a._v("user.signingkey")]),a._v(" "),r("p",[a._v("如果你要创建经签署的含附注的标签，那么把你的GPG签署密钥设置为配置项会更好")]),a._v(" "),r("p",[a._v("git config --global user.signingkey "),r("code",[a._v("<gpg-key-id>")])]),a._v(" "),r("p",[a._v("core.excludesfile")]),a._v(" "),r("p",[a._v("这个配置允许你设置类似于全局生效的.gitignore文件")]),a._v(" "),r("p",[a._v("创建 ~/.gitignore 然后运行 git config --global core.excludesfile ~/.gitignore_global，Git将把那些文件永远地拒之门外")]),a._v(" "),r("p",[a._v("help.autocorrect")]),a._v(" "),r("p",[a._v("如果你把help.autocorrect设置成1，那么只要有一个命令被模糊匹配到了，Git会自动运行该命令")]),a._v(" "),r("h4",{attrs:{id:"git中的着色"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git中的着色","aria-hidden":"true"}},[a._v("#")]),a._v(" Git中的着色")]),a._v(" "),r("p",[a._v("color.ui")]),a._v(" "),r("p",[a._v("color.*")]),a._v(" "),r("h4",{attrs:{id:"格式化与多余的空白字符"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#格式化与多余的空白字符","aria-hidden":"true"}},[a._v("#")]),a._v(" 格式化与多余的空白字符")]),a._v(" "),r("p",[a._v("core.autocrlf")]),a._v(" "),r("p",[a._v("Window使用回车（CR）和换行（LF）两个字符来结束一行，而Mac和Linudx只使用（LF）一个字符\nGit可以在你提交时自动把回车和换行转换成换行\n如果是在Windows系统上，把它设置成true，这样在检出代码时，换行会被转换成回车和换行")]),a._v(" "),r("p",[a._v("git config --global core.autocrlf true")]),a._v(" "),r("p",[a._v("git config --global core.autocrlf input 在提交时把回车和换行转换成换行，检出时不转换")]),a._v(" "),r("p",[a._v("core.whitespace")]),a._v(" "),r("p",[a._v("Git预先设置了一些选项来探测和修正多余空白字符的问题")]),a._v(" "),r("h4",{attrs:{id:"服务端配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务端配置","aria-hidden":"true"}},[a._v("#")]),a._v(" 服务端配置")]),a._v(" "),r("p",[a._v("receive.fsckObjects")]),a._v(" "),r("p",[a._v("receive.denyNonFastForwards")]),a._v(" "),r("p",[a._v("receive.denyDeletes")])])},[],!1,null,null,null);t.default=i.exports}}]);